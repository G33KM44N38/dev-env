---
- name: My dev setup
  hosts: localhost
  tasks:

  - name: check if cargo is installed
    shell: command -v cargo
    register: cargo_exists
    ignore_errors: yes

  - name: Download Installer
    when: cargo_exists is failed
    get_url:
      url: https://sh.rustup.rs
      dest: /tmp/sh.rustup.rs
      mode: '0755'
      force: 'yes'
    tags:
      - rust

  - name: install rust/cargo
    when: cargo_exists is failed
    shell: /tmp/sh.rustup.rs -y
    tags:
      - rust

  - name: installing requirement tools linux
    tags:
      - neovim
      - fish
    become: yes
    vars:
      macos_dependencies:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
      ubuntu_dependencies:
        - ninja-build
        - gettext
        - libtool-bin
        - cmake
        - g++
        - pkg-config
        - unzip
        - curl
        - python3-pip
    apt:
      name: "{{ ubuntu_dependencies }}"
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: installing tools for macos
    tags:
      - neovim
    become: yes
    vars:
      homebrew_packages:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - brew
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
    homebrew:
      name: "{{ homebrew_packages }}"
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: install fish for Debian-based OS
    become: yes
    apt:
      name: fish
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
    tags:
      - fish

  - name: install fish for macOS
    become: yes
    homebrew:
      name: fish
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
    tags:
      - fish

  - name: Cloning .dotfiles
    shell: >
      git clone https://github.com/G33KM44N38/dotfiles ~/.config/
    tags:
      - neovim
      - dotfiles

  - name: cloning neovim
    ansible.builtin.git:
      repo: 'https://github.com/neovim/neovim'
      dest: "~/neovim"
    tags:
      - neovim

  - name: installing vim-plug
    shell: >
      sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

  - name: Installation de Neovim
    vars:
      neovim_install_cmd_macos: >
        cd ~/neovim && git checkout stable && make CMAKE_BUILD_TYPE=RelWithDebInfo && sudo make install && cd ~/ && rm -rf neovim
      neovim_install_cmd_linux: >
        curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage && chmod u+x nvim.appimage && ./nvim.appimage
    shell: "{{ neovim_install_cmd_macos if ansible_os_family == 'Darwin' else neovim_install_cmd_linux }}"
    environment:
      PIP_REQUIRE_VIRTUALENV: "no"
    args:
      warn: false
    tags:
      - neovim
    become: true
    become_method: sudo

  - name: installing tmux if macos
    shell: >
       brew install tmux
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
