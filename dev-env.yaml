---
- name: My dev setup
  hosts: localhost
  tasks:

  - name: check if cargo is installed
    shell: command -v cargo
    register: cargo_exists
    ignore_errors: yes

  - name: Download Installer
    when: cargo_exists is failed
    get_url:
      url: https://sh.rustup.rs
      dest: /tmp/sh.rustup.rs
      mode: '0755'
      force: 'yes'
    tags:
      - rust

  - name: install rust/cargo
    when: cargo_exists is failed
    shell: /tmp/sh.rustup.rs -y
    tags:
      - rust

  - name: installing requirement tools linux
    tags:
      - neovim
      - fish
    become: yes
    vars:
      macos_dependencies:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
      ubuntu_dependencies:
        - ninja-build
        - gettext
        - libtool-bin
        - cmake
        - g++
        - pkg-config
        - unzip
        - curl
        - python3-pip
    apt:
      name: "{{ ubuntu_dependencies }}"
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: installing tools for macos
    tags:
      - neovim
    become: yes
    vars:
      homebrew_packages:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - brew
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
    homebrew:
      name: "{{ homebrew_packages }}"
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: install fish for Debian-based OS
    become: yes
    apt:
      name: fish
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
    tags:
      - fish

  - name: install fish for macOS
    become: yes
    homebrew:
      name: fish
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
    tags:
      - fish

  - name: Cloning .dotfiles
    git:
      repo: "https://github.com/G33KM44N38/dotfiles"
      dest: " ~/.config/"
      update: yes
      clone: no
      force: yes
    tags:
      - neovim
      - dotfiles

  - name: installing vim-plug
    shell: >
      sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

  - name: Download and install latest Neovim
    tags:
      - neovim
    block:
      - name: Find latest Neovim version
        shell: >
          curl -s https://api.github.com/repos/neovim/neovim/releases/latest |
          grep "tag_name" |
          cut -d : -f 2,3 |
          tr -d '", ' |
          xargs -I {} echo "Latest version is {}"

        register: latest_neovim_version

      - name: Download Neovim
        get_url:
          url: "https://github.com/neovim/neovim/releases/download/{{ latest_neovim_version.stdout }}/nvim-{{ latest_neovim_version.stdout }}-{{ ansible_system|lower }}{{ '-64' if ansible_architecture == 'x86_64' else '' }}.tar.gz"
          dest: /tmp/nvim.tar.gz

      - name: Extract Neovim archive
        unarchive:
          src: /tmp/nvim.tar.gz
          dest: /tmp/nvim

      - name: Copy Neovim binary to /usr/local/bin/
        copy:
          src: "/tmp/nvim/nvim-{{ latest_neovim_version.stdout }}-{{ ansible_system|lower }}{{ '-64' if ansible_architecture == 'x86_64' else '' }}/bin/nvim"
          dest: /usr/local/bin/nvim
          mode: '0755'
    when: ansible_os_family == 'Darwin' or ansible_os_family == 'Linux' or ansible_os_family == 'MacOSX'

  - name: installing tmux if macos
    shell: >
       brew install tmux
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
