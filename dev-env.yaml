---
- name: My dev setup
  hosts: localhost
  tasks:

  - name: Install unzip for Debian-based OS
    become: yes
    apt:
      name: unzip
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: Install unzip for macOS
    become: yes
    homebrew:
      name: unzip
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: Install tar for Debian-based OS
    become: yes
    apt:
      name: tar
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: Install tar for macOS
    become: yes
    homebrew:
      name: tar
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: Install FUSE for Debian-based OS
    become: yes
    apt:
      name:
        - fuse
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: Install FUSE for macOS
    become: yes
    homebrew:
      name: macfuse
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: Load FUSE kernel module for Debian-based OS
    become: yes
    ansible.builtin.shell: modprobe fuse
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: Install bash
    become: yes
    package:
      name: bash
      state: present

  - name: check if cargo is installed
    shell: command -v cargo
    register: cargo_exists
    ignore_errors: yes

  - name: Download Installer
    when: cargo_exists is failed
    get_url:
      url: https://sh.rustup.rs
      dest: /tmp/sh.rustup.rs
      mode: '0755'
      force: 'yes'
    tags:
      - rust

  - name: install rust/cargo
    when: cargo_exists is failed
    shell: /tmp/sh.rustup.rs -y
    tags:
      - rust

  - name: installing requirement tools linux
    tags:
      - neovim
      - fish
    become: yes
    vars:
      macos_dependencies:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
      ubuntu_dependencies:
        - ninja-build
        - gettext
        - libtool-bin
        - cmake
        - g++
        - pkg-config
        - unzip
        - curl
        - python3-pip
    apt:
      name: "{{ ubuntu_dependencies }}"
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'

  - name: installing tools for macos
    tags:
      - neovim
    become: yes
    vars:
      homebrew_packages:
        - ninja
        - libtool
        - cmake
        - pkg-config
        - gettext
        - curl
        - brew
        - python3-pip
        - curl-ca-bundle  # Only needed for older macOS versions
    homebrew:
      name: "{{ homebrew_packages }}"
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10

  - name: install fish for Debian-based OS
    become: yes
    apt:
      name: fish
      state: present
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Debian'
    tags:
      - fish

  - name: install fish for macOS
    become: yes
    homebrew:
      name: fish
      state: present
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
    tags:
      - fish

  - name: Cloning .dotfiles
    git:
      repo: "https://github.com/G33KM44N38/dotfiles"
      dest: " ~/.config/"
      update: yes
      clone: no
      force: yes
    tags:
      - neovim
      - dotfiles

  - name: installing vim-plug
    script: install_vim_plug.sh

  - name: Download and install latest Neovim
    tags:
      - neovim
    block:
      - name: Find latest Neovim version
        shell: >
          curl -s https://api.github.com/repos/neovim/neovim/releases/latest |
          grep "tag_name" |
          cut -d : -f 2,3 |
          tr -d '", ' |
          xargs -I {} echo "Latest version is {}"

        register: latest_neovim_version

      - name: Download Neovim AppImage
        get_url:
          url: "https://github.com/neovim/neovim/releases/latest/download/nvim.appimage"
          dest: /tmp/nvim.appimage
          mode: '0755'
      - name: Extract Neovim AppImage
        command: /tmp/nvim.appimage --appimage-extract
        args:
          chdir: /tmp/
        become: yes
      - name: Copy Neovim binary to /usr/local/bin/
        become: yes
        copy:
          src: /tmp/squashfs-root/usr/bin/nvim
          dest: /usr/local/bin/nvim
          mode: '0755'

  - name: installing tmux if macos
    shell: >
       brew install tmux
    when: ansible_distribution == 'MacOSX' and ansible_distribution_version.major >= 10
